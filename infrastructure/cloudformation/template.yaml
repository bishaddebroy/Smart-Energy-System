AWSTemplateFormatVersion: '2010-09-09'
Description: 'Smart Campus Energy Management System - CloudFormation Template'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment (dev or prod)
  
  RetentionDays:
    Type: Number
    Default: 30
    Description: Number of days to retain data in DynamoDB before archiving
  
  NotificationEmail:
    Type: String
    Default: ""
    Description: Email address to receive alert notifications (leave empty to skip email notifications)

Conditions:
  HasNotificationEmail: !Not [!Equals [!Ref NotificationEmail, ""]]

Resources:
  # ========== S3 Buckets ==========
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "smart-campus-energy-website-${AWS::AccountId}-${Environment}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET]
            AllowedOrigins: ['*']
            MaxAge: 3000
    DeletionPolicy: Delete

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub "${WebsiteBucket.Arn}/*"

  HistoricalDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "smart-campus-energy-data-${AWS::AccountId}-${Environment}"
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToStandardIA
            Status: Enabled
            Transitions:
              - TransitionInDays: 90
                StorageClass: STANDARD_IA
          - Id: TransitionToGlacier
            Status: Enabled
            Transitions:
              - TransitionInDays: 180
                StorageClass: GLACIER
    DeletionPolicy: Delete

  # ========== DynamoDB Table ==========
  EnergyDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "EnergyData-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: buildingId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: buildingId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # ========== Lambda Functions ==========
  DataSimulationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "data-simulation-${Environment}"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Code:
        S3Bucket: !Sub "smart-campus-energy-deployment-${Environment}"
        S3Key: "lambda/data-simulation.zip"
      Environment:
        Variables:
          TABLE_NAME: !Ref EnergyDataTable
          ENVIRONMENT: !Ref Environment
          RETENTION_DAYS: !Ref RetentionDays
      Timeout: 60
      MemorySize: 256
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ApiHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "api-handler-${Environment}"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Code:
        S3Bucket: !Sub "smart-campus-energy-deployment-${Environment}"
        S3Key: "lambda/api-handler.zip"
      Environment:
        Variables:
          TABLE_NAME: !Ref EnergyDataTable
          ENVIRONMENT: !Ref Environment
          HISTORICAL_BUCKET: !Ref HistoricalDataBucket
          DASHBOARD_URL: !Sub "http://${WebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com"
      Timeout: 30
      MemorySize: 256
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ArchiveFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "archive-${Environment}"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Code:
        S3Bucket: !Sub "smart-campus-energy-deployment-${Environment}"
        S3Key: "lambda/archive.zip"
      Environment:
        Variables:
          TABLE_NAME: !Ref EnergyDataTable
          BUCKET_NAME: !Ref HistoricalDataBucket
          ENVIRONMENT: !Ref Environment
      Timeout: 300
      MemorySize: 512
      Tags:
        - Key: Environment
          Value: !Ref Environment

  AlertCheckerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "alert-checker-${Environment}"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Code:
        S3Bucket: !Sub "smart-campus-energy-deployment-${Environment}"
        S3Key: "lambda/alert-checker.zip"
      Environment:
        Variables:
          TABLE_NAME: !Ref EnergyDataTable
          SNS_TOPIC: !Ref AlertTopic
          ENVIRONMENT: !Ref Environment
          DASHBOARD_URL: !Sub "http://${WebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com"
      Timeout: 60
      MemorySize: 256
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # ========== EventBridge Rules ==========
  DataSimulationSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "data-simulation-schedule-${Environment}"
      Description: "Schedule for data simulation Lambda function"
      ScheduleExpression: "rate(5 minutes)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt DataSimulationFunction.Arn
          Id: "DataSimulationTarget"

  DataSimulationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DataSimulationFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt DataSimulationSchedule.Arn

  ArchiveSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "archive-schedule-${Environment}"
      Description: "Schedule for archive Lambda function"
      ScheduleExpression: "cron(0 2 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt ArchiveFunction.Arn
          Id: "ArchiveTarget"

  ArchivePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ArchiveFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ArchiveSchedule.Arn

  # Add a new rule to trigger alerts every 5 minutes
  AlertCheckerSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "alert-checker-schedule-${Environment}"
      Description: "Schedule for alert checker Lambda function"
      ScheduleExpression: "rate(5 minutes)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt AlertCheckerFunction.Arn
          Id: "AlertCheckerTarget"

  AlertCheckerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AlertCheckerFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt AlertCheckerSchedule.Arn

  # Add DynamoDB Stream Trigger for Alert Checker
  AlertCheckerEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt EnergyDataTable.StreamArn
      FunctionName: !GetAtt AlertCheckerFunction.Arn
      StartingPosition: LATEST

  # ========== API Gateway ==========
  EnergyApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "smart-campus-energy-api-${Environment}"
      Description: "API for Smart Campus Energy Management System"
      EndpointConfiguration:
        Types:
          - REGIONAL

  EnergyApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref EnergyApi
      ParentId: !GetAtt EnergyApi.RootResourceId
      PathPart: "energy"

  # GET Method
  EnergyApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EnergyApi
      ResourceId: !Ref EnergyApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiHandlerFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  # OPTIONS Method for CORS preflight requests
  EnergyApiOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref EnergyApi
      ResourceId: !Ref EnergyApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: "{}"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  EnergyApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - EnergyApiMethod
      - EnergyApiOptionsMethod
    Properties:
      RestApiId: !Ref EnergyApi
      StageName: !Ref Environment

  ApiHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ApiHandlerFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${EnergyApi}/${Environment}/GET/energy"

  # ========== SNS Topic and Subscription ==========
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "energy-alerts-${Environment}"
      DisplayName: "Energy Alerts"

  EmailSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasNotificationEmail
    Properties:
      TopicArn: !Ref AlertTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # ========== CloudWatch Alarms ==========
  HighEnergyConsumptionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "high-energy-consumption-${Environment}"
      AlarmDescription: "Alarm when energy consumption exceeds threshold"
      MetricName: EnergyConsumption
      Namespace: "SmartCampus"
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 200  # Lower threshold to 200 to match with Lambda function
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${EnergyApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/energy"

  WebsiteURL:
    Description: "S3 Website URL"
    Value: !Sub "http://${WebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com"

  DynamoDBTable:
    Description: "DynamoDB Table Name"
    Value: !Ref EnergyDataTable

  HistoricalDataBucketName:
    Description: "S3 Bucket for Historical Data"
    Value: !Ref HistoricalDataBucket

  WebsiteBucketName:
    Description: "S3 Bucket for Website"
    Value: !Ref WebsiteBucket

  SNSTopicARN:
    Description: "SNS Topic ARN for alerts"
    Value: !Ref AlertTopic